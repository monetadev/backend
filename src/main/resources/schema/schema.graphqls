"""
Custom scalars
"""
scalar DateTime
scalar UUID

"""
User registration input
"""
input UserRegInput {
    username: String!
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    confirmPassword: String!
}

"""
Authentication response
"""
type AuthPayload {
    token: String!
    user: User!
}

"""
Flashcard creation or update input
"""
input FlashcardInput {
    term: String!
    definition: String!
    position: Int!
}

"""
Flashcard set creation or update
"""
input FlashcardSetInput {
    title: String
    description: String
    visible: Boolean!
    #tags: [String!]
}

"""
Flashcard Filtering Input
"""
input FlashcardFilterInput {
    """
    Search term
    """
    searchTerm: String

    """
    Filter by creation date
    """
    createdAfter: DateTime
    createdBefore: DateTime
}

"""
Flashcard Set Filtering Input
"""
input FlashcardSetFilterInput {
    """
    Search term
    """
    searchTerm: String

    """
    Filter by visibility
    """
    onlyVisible: Boolean

    """
    Filter by creation date
    """
    createdAfter: DateTime
    createdBefore: DateTime
}

"""
AI Document Input
"""
input DocumentInput {
    documentText: String
    documentBase64: String
    documentUrl: String
}

"""
AI Generation Options
"""
input AIGenerationOptions {
    aiProvider: String!  # "OPENAI", "ANTHROPIC", "OLLAMA"
    modelName: String!
    cardCount: Int!
    difficulty: String!  # "BEGINNER", "INTERMEDIATE", "ADVANCED"
    language: String!
    topic: String
}

type Flashcard {
    """
    Unique identifier
    """
    id: UUID!

    """
    Unique identifier that links THIS flashcard to a FlashcardSet
    """
    setID: UUID!

    term: String!

    definition: String!

    """
    THIS Flashcard's position within the set
    """
    position: Int!

    createdAt: DateTime!

    updatedAt: DateTime
}

type GeneratedFlashcard {
    term: String!
    definition: String!
    position: Int!
}

type FlashcardGenerationResult {
    temporaryId: UUID!
    generatedFlashcards: [GeneratedFlashcard!]!
}

type FlashcardSet {
    """
    Unique identifier
    """
    id: UUID!

    """
    Unique identifier that links THIS FlashcardSet to the original User
    """
    authorUserId: UUID!

    title: String

    description: String

    """
    Determine whether THIS FlashcardSet is visible to the public or just to the original User
    """
    visible: Boolean!

    createdAt: DateTime!

    updatedAt: DateTime

    """
    List of Flashcards within the set
    """
    flashcards: [Flashcard]
}

type User {
    """
    Unique identifier
    """
    id: UUID!

    username: String!

    email: String!

    firstName: String!

    lastName: String!

    createdAt: DateTime!

    updatedAt: DateTime

    flashcardSets: [FlashcardSet]

    """
    THIS User's assigned roles
    """
    roles: [Role]
}

type Role {
    """
    Uniquely identify every role
    """
    id: UUID!

    name: String!

    privileges: [Privilege]
}

type Privilege {
    """
    Uniquely identify every privilege
    """
    id: UUID!

    name: String!
}

"""
Used to Perform Crud Operations
"""
type Mutation {
    """
    Authentication Mutations
    """
    register(input: UserRegInput!): AuthPayload!
    login(username: String!, password: String!): AuthPayload!

    """
    AI Generation Mutations
    """
    generateFlashcards(document: DocumentInput!, options: AIGenerationOptions!): FlashcardGenerationResult!
    saveGeneratedFlashcards(
        temporaryId: UUID!,
        title: String!,
        description: String,
        visible: Boolean!,
        flashcards: [FlashcardInput!]!
    ): FlashcardSet!

    """
    Creation Mutations
    """
    createUser(userInput: UserRegInput!): User!
    createFlashcard(setId: UUID!, flashcardInput: FlashcardInput!): Flashcard!
    createFlashcardSet(flashcardSetInput: FlashcardSetInput!): FlashcardSet!
    createPrivilege(name: String!): Privilege!
    createRole(name: String!): Role!

    """
    Update Mutations
    """
    updateUser(id: UUID!, username: String, email: String, firstName: String, lastName: String): User!
    updateFlashcard(id: UUID!, flashcardInput: FlashcardInput): Flashcard!
    updateFlashcardSet(id: UUID!, setInput: FlashcardSetInput): FlashcardSet!
    updatePrivilege(id: UUID!, name: String): Privilege!
    updateRole(id: UUID, name: String): Role!

    """
    Delete Mutations
    """
    deleteUser(id: UUID!): Boolean!
    deleteFlashcardSet(id: UUID!): Boolean!
    deleteFlashcard(id: UUID!): Boolean!
    deletePrivilege(id: UUID!): Boolean!
    deleteRole(id: UUID!): Boolean!

    """
    Assign a Role to a User
    """
    assignRoleToUser(userId: UUID!, roleId: UUID!): User!

    """
    Remove a Role from a User
    """
    removeRoleFromUser(userId: UUID!, roleId: UUID!): User!

    """
    Assign Privilege to Role
    """
    assignPrivilegeToRole(roleId: UUID!, privilegeId: UUID!): Role!

    """
    Remove Privilege from Role
    """
    removePrivilegeFromRole(roleId: UUID!, privilegeId: UUID!): Role!
}

"""
Queries used for retrieving data
"""
type Query {
    """
    User queries
    """
    me: User
    findUserById(id: UUID): User
    findUserByUsername(username: String!): User
    findUserByEmail(email: String!): User

    """
    FlashcardSet queries
    """
    findFlashcardSetById(id: UUID!): FlashcardSet
    findFlashcardSetByAuthorId(id: UUID!): [FlashcardSet]
    findPublicFlashcardSets(filter: FlashcardSetFilterInput): [FlashcardSet]

    """
    Flashcard queries
    """
    findFlashcardById(id: UUID!): Flashcard
    findFlashcardsBySetId(id: UUID!, filter: FlashcardFilterInput): [Flashcard]

    """
    Role and privilege queries
    """
    findRoleById(id: UUID!): Role
    findRoleByName(name: String!): Role
    findPrivilegeById(id: UUID!): Privilege
    findPrivilegeByName(name: String!): Privilege
    roles: [Role!]!
    privileges: [Privilege!]!
}